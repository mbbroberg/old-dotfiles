#!/bin/bash
# Convert bash aliases to bash scripts.
#
# Copyright 2018 <hoijui.quaero@gmail.com>, licensed under the GPL-3.0+
#
# Usage:
#   convert_bash_aliases_to_scripts          # converts all bash aliases to script files
#   convert_bash_aliases_to_scripts clean    # removes all scripts previously converted by this script
# Found: https://unix.stackexchange.com/questions/427234/how-to-access-bash-aliases-in-fish
COLOR_RED=$'\e[0;31m'
COLOR_ORANGE=$'\e[0;33m'
COLOR_BLUE=$'\e[0;34m'
COLOR_BLUE_LIGHT=$'\e[1;34m'
COLOR_GREEN=$'\e[0;32m'
COLOR_BROWN=$'\e[0;33m'
COLOR_YELLOW=$'\e[1;33m'
COLOR_WHITE=$'\e[1;37m'
COLOR_CYAN=$'\e[0;36m'
COLOR_PURPLE=$'\e[0;35m'
COLOR_GRAY=$'\e[1;30m'
COLOR_GRAY_LIGHT=$'\e[0;37m'
COLOR_NONE=$'\e[m' # No Color

OUTPUT_DIR=~/bin/converted/aliases
LINKS_DIR=~/bin
README_FILE_NAME="README.md"
README_FILE="$OUTPUT_DIR/$README_FILE_NAME"

if [ "$1" = "clean" ]
then
    for script_file in $(find "$LINKS_DIR" -maxdepth 1 -type l)
    do
        conv_script_file="$OUTPUT_DIR/$(basename $script_file)"
        if [ -e $conv_script_file ] && [ "$(readlink --canonicalize $script_file)" = "$(realpath $conv_script_file)" ]
        then
            script_name=$(basename $script_file)
            echo "removing converted bash alias-script: $script_name"
            rm $conv_script_file \
                && rm $script_file
        fi
    done
    rm $README_FILE 2> /dev/null
    rmdir $OUTPUT_DIR 2> /dev/null
    exit 0
fi

SOURCE_FILES="${HOME}/.bashrc ${HOME}/.bash_aliases"
mkdir -p $OUTPUT_DIR
echo -e "# Bash alias conversion scripts\n\nsee $0\n\nWARNING: Do NOT manually edit files in this directory. instead, copy them to $LINKS_DIR (replacing the symbolic link that already exists there), and edit that new file.\nIf you edit the files in this dir, it will be replaced on the next (re)conversion from aliases." \
    > $README_FILE
AUTO_IMPORT_WARNING="# WARNING Do NOT edit this file by hand, as it was auto-generated from a bash alias, and may be overwritten in the future. please read ${README_FILE}"

function _is_link_to {
    local file_link=$1
    local file_target=$2
    test -e $file_target \
        && test "$(readlink --canonicalize $file_link)" = "$(realpath $file_target)"
    return $?
}

function _is_recursive_alias () {
    local alias_name="$1"
    local alias_command="$2"
    local alias_command_first_word=$(echo "$alias_command" | sed -e 's/^[ \t]*['\''\"]\?//' -e 's/[ \t].*//')
    test "$alias_command_first_word" = "$alias_name"
    return $?
}

for source_file in $SOURCE_FILES
do
    IFS=$'\n'
    for a in $(cat $source_file | grep "^alias")
    do
        a_name="$(echo "$a" | sed -e 's/alias \([^=]*\)=.*/\1/')"
        a_command="$(echo "$a" | sed -e 's/alias \([^=]*\)=//' -e 's/[ \t]*#.*$//')"
        if echo "${a_command:0:1}" | grep -q -e "[\'\"]"
        then
            # unquote
            a_command_start=1
            let a_command_end="${#a_command} - 2"
        else
            # leave as is
            a_command_start=0
            let a_command_end="${#a_command}"
        fi
        script_file="$LINKS_DIR/$a_name"
        conv_script_file="$OUTPUT_DIR/$a_name"
        # Check whether the script already exists.
        # If so, we skip importing it, unless it is just a link to a previously imported script.
        log_action="ignored"
        log_action_color="${COLOR_NONE}"
        log_content=""
        if [ -e $script_file ] && ! $(_is_link_to $script_file $conv_script_file)
        then
            log_action="skipped (exists)"
            log_action_color="${COLOR_ORANGE}"
        elif _is_recursive_alias "$a_name" "$a_command"
        then
            log_action="skipped (recursive)"
            log_action_color="${COLOR_RED}"
        else
            if [ -e $script_file ]
            then
                log_action="reimporting"
                log_action_color="${COLOR_BLUE}"
            else
                log_action="importing"
                log_action_color="${COLOR_GREN}"
            fi

            # write the script file to a temporary location
            conv_script_file_tmp="${conv_script_file}_BAK"
            echo "#!/bin/bash" > $conv_script_file_tmp
            echo -e "$AUTO_IMPORT_WARNING" >> $conv_script_file_tmp
            echo -e "#\n# Imported bash alias '$a_name' from file '$source_file'" >> $conv_script_file_tmp
            cat >> "${conv_script_file_tmp}" <<EOF

${a_command:${a_command_start}:${a_command_end}} \${@}

EOF

            if diff -N ${conv_script_file_tmp} ${conv_script_file} > /dev/null
            then
                log_content="no change"
                log_content_color="${COLOR_NONE}"
            else
                log_content="changed"
                log_content_color="${COLOR_GREEN}"
            fi
            log_content=$(printf "%s %10s -> %s${COLOR_NONE}" "${log_content_color}" "${log_content}" "$a_command")

            mv "${conv_script_file_tmp}" "${conv_script_file}"

            # make the script executable
            chmod +x $conv_script_file
            # remove the link if it already exists (in case of reimport)
            rm $script_file 2> /dev/null
            # .. and re-create it as local symbolic link
            # to the function in the imports dir
            ln --symbolic --relative $conv_script_file $script_file
        fi
        printf "%s%20s: %-25s${COLOR_NONE}%s\n" "${log_action_color}" "${log_action}" "$a_name" "${log_content}"
    done
done
